import { useEffect, useState, useRef } from 'react';
import { useLocation } from 'react-router-dom';

export type TransitionDirection = 'forward' | 'backward' | 'none';
export type TransitionState = 'idle' | 'entering' | 'exiting';

export interface PageTransitionConfig {
  enableTransition?: boolean;
  transitionDuration?: number;
}

export interface PageTransitionReturn {
  isTransitioning: boolean;
  direction: TransitionDirection;
  transitionState: TransitionState;
  transitionClass: string;
}

// ÎÇ¥ÎπÑÍ≤åÏù¥ÏÖò ÌûàÏä§ÌÜ†Î¶¨Î•º Ï∂îÏ†ÅÌïòÍ∏∞ ÏúÑÌïú Ïä§ÌÉù
let navigationStack: string[] = [];

export const usePageTransition = (
  config: PageTransitionConfig = {},
): PageTransitionReturn => {
  const { enableTransition = true, transitionDuration = 300 } = config;
  const location = useLocation();
  const previousPathRef = useRef<string>('');
  const cleanupTimerRef = useRef<NodeJS.Timeout>();

  console.log('üîß [PageTransition] Hook initialized with config:', {
    enableTransition,
    transitionDuration,
  });

  const [isTransitioning, setIsTransitioning] = useState(false);
  const [direction, setDirection] = useState<TransitionDirection>('none');
  const [transitionState, setTransitionState] =
    useState<TransitionState>('idle');
  const [transitionClass, setTransitionClass] = useState('');

  useEffect(() => {
    console.log('üöÄ [PageTransition] useEffect triggered');
    console.log('üìç Current pathname:', location.pathname);
    console.log('‚öôÔ∏è Enable transition:', enableTransition);

    if (!enableTransition) {
      // Ï†ÑÌôòÏù¥ ÎπÑÌôúÏÑ±ÌôîÎêú Í≤ΩÏö∞ Ï¥àÍ∏∞ ÏÉÅÌÉúÎ°ú Î¶¨ÏÖã
      setIsTransitioning(false);
      setDirection('none');
      setTransitionState('idle');
      setTransitionClass('');
      return;
    }

    const currentPath = location.pathname;
    const previousPath = previousPathRef.current;

    // Ï≤´ ÌéòÏù¥ÏßÄ Î°úÎìúÏù∏ Í≤ΩÏö∞
    if (!previousPath) {
      console.log('üè† [PageTransition] First load - no animation');
      previousPathRef.current = currentPath;

      // Ïä§ÌÉù Ï¥àÍ∏∞Ìôî ÎòêÎäî ÌòÑÏû¨ Í≤ΩÎ°ú Ï∂îÍ∞Ä
      if (!navigationStack.includes(currentPath)) {
        navigationStack.push(currentPath);
      }

      return;
    }

    // Í≤ΩÎ°úÍ∞Ä Î≥ÄÍ≤ΩÎêú Í≤ΩÏö∞
    if (currentPath !== previousPath) {
      console.log('üîÑ [PageTransition] Path change detected');
      console.log('  - Current path:', currentPath);
      console.log('  - Previous path:', previousPath);
      console.log('  - History stack:', navigationStack);

      let detectedDirection: TransitionDirection = 'none';

      // ÌòÑÏû¨ Í≤ΩÎ°úÏôÄ Ïù¥Ï†Ñ Í≤ΩÎ°úÍ∞Ä Ïä§ÌÉùÏóê ÏûàÎäîÏßÄ ÌôïÏù∏
      const currentIndex = navigationStack.indexOf(currentPath);
      const previousIndex = navigationStack.indexOf(previousPath);

      if (currentIndex === -1 && previousIndex !== -1) {
        // ÏÉàÎ°úÏö¥ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô (forward)
        detectedDirection = 'forward';
        navigationStack.push(currentPath);
      } else if (currentIndex !== -1 && previousIndex === -1) {
        // Ïù¥Ï†Ñ Í≤ΩÎ°úÍ∞Ä Ïä§ÌÉùÏóê ÏóÜÎäî Í≤ΩÏö∞ (ÌäπÏàòÌïú Í≤ΩÏö∞)
        detectedDirection = 'backward';
        navigationStack.push(previousPath);
      } else if (currentIndex !== -1 && previousIndex !== -1) {
        // Îëò Îã§ Ïä§ÌÉùÏóê ÏûàÎäî Í≤ΩÏö∞
        console.log('üìä [PageTransition] Stack analysis:');
        console.log('  - Current index:', currentIndex);
        console.log('  - Previous index:', previousIndex);
        console.log('  - Stack before:', [...navigationStack]);

        if (currentIndex > previousIndex) {
          // ÏïûÏúºÎ°ú Í∞ÄÍ∏∞
          detectedDirection = 'forward';
          console.log(
            'üìà [PageTransition] Both paths in stack - direction: forward',
          );
        } else {
          // Îí§Î°ú Í∞ÄÍ∏∞
          detectedDirection = 'backward';
          // Îí§Î°ú Í∞à ÎïåÎäî ÌòÑÏû¨ ÏúÑÏπò Ïù¥ÌõÑÏùò Í∏∞Î°ù Ï†úÍ±∞
          navigationStack = navigationStack.slice(0, currentIndex + 1);
          console.log(
            'üìâ [PageTransition] Both paths in stack - direction: backward',
          );
          console.log('  - Stack after cleanup:', [...navigationStack]);
        }
      } else {
        // Îëò Îã§ Ïä§ÌÉùÏóê ÏóÜÎäî Í≤ΩÏö∞ (Ï≤´ ÏßÑÏûÖ)
        detectedDirection = 'forward';
        if (previousPath) navigationStack.push(previousPath);
        navigationStack.push(currentPath);
      }

      // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏãúÏûë
      if (detectedDirection === 'forward' || detectedDirection === 'backward') {
        console.log('üé¨ [PageTransition] Starting animation');
        console.log('  - Direction:', detectedDirection);
        console.log('  - Duration:', transitionDuration + 'ms');

        setIsTransitioning(true);
        setDirection(detectedDirection);
        setTransitionState('entering');

        // Ï¥àÍ∏∞ ÏÉÅÌÉú ÏÑ§Ï†ï
        let enterClass = '';
        if (detectedDirection === 'forward') {
          enterClass = 'page-slide-enter-from-right';
        } else if (detectedDirection === 'backward') {
          enterClass = 'page-slide-enter-from-left';
        }

        console.log('üé® [PageTransition] Setting enter class:', enterClass);
        setTransitionClass(enterClass);

        // Îçî ÏïàÏ†ïÏ†ÅÏù∏ Ïï†ÎãàÎ©îÏù¥ÏÖò ÌôúÏÑ±ÌôîÎ•º ÏúÑÌï¥ Ïù¥Ï§ë requestAnimationFrame ÏÇ¨Ïö©
        requestAnimationFrame(() => {
          // Í∞ïÏ†ú reflowÎ°ú CSS Ï†ÅÏö© Î≥¥Ïû•
          const wrapper = document.querySelector('.page-transition-container');
          if (wrapper) {
            // getComputedStyleÏùÑ Ìò∏Ï∂úÌïòÏó¨ Í∞ïÏ†ú reflow Î∞úÏÉù
            const computedTransform =
              window.getComputedStyle(wrapper).transform;
            console.log(
              'üîÑ [PageTransition] Forced reflow to ensure CSS application, current transform:',
              computedTransform,
            );
          }

          requestAnimationFrame(() => {
            console.log(
              '‚ú® [PageTransition] Activating animation class:',
              enterClass + ' page-slide-enter-active',
            );
            setTransitionClass(enterClass + ' page-slide-enter-active');
          });
        });

        // Ïï†ÎãàÎ©îÏù¥ÏÖò ÏôÑÎ£å ÌõÑ Ï†ïÎ¶¨
        cleanupTimerRef.current = setTimeout(() => {
          console.log('üèÅ [PageTransition] Animation completed - cleaning up');
          setIsTransitioning(false);
          setDirection('none');
          setTransitionState('idle');
          setTransitionClass('');
        }, transitionDuration);
      }

      // Ïù¥Ï†Ñ Í≤ΩÎ°ú ÏóÖÎç∞Ïù¥Ìä∏
      previousPathRef.current = currentPath;
      console.log('üíæ [PageTransition] Updated previous path to:', currentPath);
    }

    // Cleanup Ìï®Ïàò
    return () => {
      console.log('üßπ [PageTransition] Cleaning up timers');
      if (cleanupTimerRef.current) {
        clearTimeout(cleanupTimerRef.current);
      }
    };
  }, [location.pathname, transitionDuration, enableTransition]);

  // ÏÉÅÌÉú Î≥ÄÍ≤Ω Î°úÍπÖ
  useEffect(() => {
    console.log('üìä [PageTransition] State update:');
    console.log('  - isTransitioning:', isTransitioning);
    console.log('  - direction:', direction);
    console.log('  - transitionState:', transitionState);
    console.log('  - transitionClass:', transitionClass);
  }, [isTransitioning, direction, transitionState, transitionClass]);

  console.log('‚Ü©Ô∏è [PageTransition] Returning:', {
    isTransitioning,
    direction,
    transitionState,
    transitionClass,
  });

  return {
    isTransitioning,
    direction,
    transitionState,
    transitionClass,
  };
};
