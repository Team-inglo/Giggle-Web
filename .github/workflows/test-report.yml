name: 📊 Advanced Test Report

on:
  pull_request:
    branches: [main, dev, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Run tests with detailed reporting
        run: |
          echo "Running tests with JSON reporter..."
          
          # 테스트 실행 및 결과 수집 (JSON과 기본 출력 모두 확보)
          pnpm test --reporter=json > test-results.json 2>&1 || echo "Tests may have failed"
          
          # JSON 파일이 비어있거나 잘못된 경우를 대비해 기본 테스트도 실행
          pnpm test --reporter=verbose > test-verbose.txt 2>&1 || echo "Verbose test failed"
          
          # 커버리지 실행
          pnpm test:coverage > coverage-output.txt 2>&1 || echo "Coverage failed"
          
          echo "Test execution completed. Checking outputs..."
          echo "JSON file size: $(wc -c < test-results.json 2>/dev/null || echo '0') bytes"
          echo "JSON file first 200 chars: $(head -c 200 test-results.json 2>/dev/null || echo 'No JSON file')"
        continue-on-error: true
        
      - name: Parse test results and generate report
        id: test_results
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            let summary = {
              totalTests: 0,
              passedTests: 0,
              failedTests: 0,
              skippedTests: 0,
              runtime: 0,
              coverage: {
                lines: 0,
                functions: 0,
                branches: 0,
                statements: 0
              },
              failedTestDetails: []
            };
            
            try {
              // 커버리지 데이터 파싱
              if (fs.existsSync('./coverage/coverage-summary.json')) {
                try {
                  const coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
                  if (coverageData.total) {
                    summary.coverage = {
                      lines: coverageData.total.lines?.pct || 0,
                      functions: coverageData.total.functions?.pct || 0,
                      branches: coverageData.total.branches?.pct || 0,
                      statements: coverageData.total.statements?.pct || 0
                    };
                  }
                } catch (e) {
                  console.log('Coverage data parsing failed:', e.message);
                }
              }
              
              // JSON 결과 파싱 시도
              if (fs.existsSync('./test-results.json')) {
                try {
                  const content = fs.readFileSync('./test-results.json', 'utf8').trim();
                  console.log('JSON content length:', content.length);
                  console.log('JSON content preview:', content.substring(0, 300));
                  
                  if (content && content.startsWith('{')) {
                    const testData = JSON.parse(content);
                    console.log('Parsed JSON keys:', Object.keys(testData));
                    
                    // vitest JSON 형식 처리
                    if (testData.testResults && Array.isArray(testData.testResults)) {
                      testData.testResults.forEach(file => {
                        if (file.assertionResults && Array.isArray(file.assertionResults)) {
                          file.assertionResults.forEach(test => {
                            summary.totalTests++;
                            if (test.status === 'passed') {
                              summary.passedTests++;
                            } else if (test.status === 'failed') {
                              summary.failedTests++;
                              summary.failedTestDetails.push({
                                file: file.name,
                                test: test.title,
                                error: test.failureMessages?.[0] || 'Unknown error'
                              });
                            } else {
                              summary.skippedTests++;
                            }
                          });
                        }
                      });
                    } else if (testData.numTotalTests !== undefined) {
                      // Jest 스타일
                      summary.totalTests = testData.numTotalTests || 0;
                      summary.passedTests = testData.numPassedTests || 0;
                      summary.failedTests = testData.numFailedTests || 0;
                      summary.skippedTests = testData.numPendingTests || 0;
                    }
                  }
                } catch (e) {
                  console.log('JSON parsing failed:', e.message);
                }
              }
              
              // JSON 파싱이 실패했거나 결과가 없으면 verbose 출력에서 파싱
              if (summary.totalTests === 0 && fs.existsSync('./test-verbose.txt')) {
                const verboseContent = fs.readFileSync('./test-verbose.txt', 'utf8');
                console.log('Verbose content preview:', verboseContent.substring(0, 500));
                
                // 간단한 패턴 매칭으로 결과 추출
                const passedMatch = verboseContent.match(/(\d+) passed/);
                const failedMatch = verboseContent.match(/(\d+) failed/);
                const totalMatch = verboseContent.match(/Tests\s+(\d+) passed/);
                
                if (passedMatch) summary.passedTests = parseInt(passedMatch[1]);
                if (failedMatch) summary.failedTests = parseInt(failedMatch[1]);
                summary.totalTests = summary.passedTests + summary.failedTests + summary.skippedTests;
                
                console.log('Extracted from verbose - Total:', summary.totalTests, 'Passed:', summary.passedTests, 'Failed:', summary.failedTests);
              }
              
              console.log('Final summary:', JSON.stringify(summary, null, 2));
              
              // 성능 및 커버리지 체크
              const performanceWarnings = [];
              if (summary.runtime > 30000) {
                performanceWarnings.push('⚠️ Tests took longer than 30 seconds');
              }
              
              const coverageWarnings = [];
              Object.entries(summary.coverage).forEach(([metric, value]) => {
                if (value < 80) {
                  coverageWarnings.push(\`⚠️ \${metric.charAt(0).toUpperCase() + metric.slice(1)} coverage is below 80% (\${value}%)\`);
                }
              });
              
              const emoji = summary.failedTests === 0 && summary.totalTests > 0 ? '✅' : 
                           summary.totalTests === 0 ? '⚠️' : '❌';
              const testStatus = summary.totalTests === 0 ? 'NO TESTS FOUND' :
                                summary.failedTests === 0 ? 'ALL TESTS PASSED' : 'SOME TESTS FAILED';
              
              let comment = \`## \${emoji} Vitest Test Results
              
              **Status:** \${testStatus}
              \${summary.runtime > 0 ? \`**Runtime:** \${(summary.runtime / 1000).toFixed(2)}s\` : ''}
              
              ### 📊 Test Summary
              \\\`\\\`\\\`
              Total:   \${summary.totalTests} tests
              Passed:  \${summary.passedTests} tests
              Failed:  \${summary.failedTests} tests
              Skipped: \${summary.skippedTests} tests
              \\\`\\\`\\\`
              \`;
              
              if (summary.coverage.lines > 0 || summary.coverage.functions > 0) {
                comment += \`
              ### 📈 Coverage Report
              | Metric | Coverage | Status |
              |--------|----------|--------|
              | Lines | \${summary.coverage.lines}% | \${summary.coverage.lines >= 80 ? '✅' : '❌'} |
              | Functions | \${summary.coverage.functions}% | \${summary.coverage.functions >= 80 ? '✅' : '❌'} |
              | Branches | \${summary.coverage.branches}% | \${summary.coverage.branches >= 80 ? '✅' : '❌'} |
              | Statements | \${summary.coverage.statements}% | \${summary.coverage.statements >= 80 ? '✅' : '❌'} |
              \`;
              }
              
              if (performanceWarnings.length > 0) {
                comment += \`\\n### ⏱️ Performance Warnings\\n\` + performanceWarnings.join('\\n') + '\\n';
              }
              
              if (coverageWarnings.length > 0) {
                comment += \`\\n### 📉 Coverage Warnings\\n\` + coverageWarnings.join('\\n') + '\\n';
              }
              
              if (summary.failedTestDetails.length > 0) {
                comment += \`\\n### ❌ Failed Tests\\n\`;
                summary.failedTestDetails.slice(0, 5).forEach(test => {
                  comment += \`\\n**\${test.file}**\\n\`;
                  comment += \`- \${test.test}\\n\`;
                  comment += \`\\\`\\\`\\\`\\n\${test.error.slice(0, 500)}...\\\`\\\`\\\`\\n\`;
                });
                
                if (summary.failedTestDetails.length > 5) {
                  comment += \`\\n*... and \${summary.failedTestDetails.length - 5} more failures*\\n\`;
                }
              } else if (summary.totalTests > 0 && summary.failedTests === 0) {
                comment += \`\\n### 🎉 All tests passed!\\nGreat job! All your tests are working correctly.\\n\`;
              } else if (summary.totalTests === 0) {
                comment += \`\\n### ⚠️ No tests found\\nMake sure your test files are properly configured and located in the right directories.\\n\`;
              }
              
              comment += \`\\n### 🔗 Quick Actions\\n\`;
              comment += \`- [🧪 Run tests locally](\\\`pnpm test\\\`)\\n\`;
              comment += \`- [📊 Run coverage locally](\\\`pnpm test:coverage\\\`)\\n\`;
              comment += \`- [🎨 Open Vitest UI](\\\`pnpm test:ui\\\`)\\n\`;
              comment += \`- [⚙️ View workflow logs](\${process.env.GITHUB_SERVER_URL}/\${process.env.GITHUB_REPOSITORY}/actions/runs/\${process.env.GITHUB_RUN_ID})\\n\`;
              
              comment += \`\\n---\\n*🤖 Generated by GitHub Actions at \${new Date().toISOString()}*\`;
              
              fs.writeFileSync('test-comment.md', comment);
              
              // GitHub Actions 출력
              const output = process.env.GITHUB_OUTPUT;
              if (output) {
                fs.appendFileSync(output, \`test_status=\${summary.failedTests === 0 && summary.totalTests > 0 ? 'success' : summary.totalTests === 0 ? 'neutral' : 'failure'}\\n\`);
                fs.appendFileSync(output, \`total_tests=\${summary.totalTests}\\n\`);
                fs.appendFileSync(output, \`failed_tests=\${summary.failedTests}\\n\`);
              }
              
            } catch (error) {
              console.error('Error in test parsing:', error);
              console.error('Stack trace:', error.stack);
              
              const fallbackComment = \`## ⚠️ Test Parsing Error
              
              Could not parse test results properly. The tests may have run but results couldn't be processed.
              
              **Debugging info:**
              - Error: \${error.message}
              - Check the [workflow logs](\${process.env.GITHUB_SERVER_URL}/\${process.env.GITHUB_REPOSITORY}/actions/runs/\${process.env.GITHUB_RUN_ID}) for details
              
              **Next steps:**
              - Run tests locally: \\\`pnpm test\\\`
              - Check vitest configuration in \\\`vite.config.ts\\\`
              - Verify test files are in the correct location
              
              ---
              *🤖 Generated by GitHub Actions*\`;
              
              fs.writeFileSync('test-comment.md', fallbackComment);
              
              const output = process.env.GITHUB_OUTPUT;
              if (output) {
                fs.appendFileSync(output, 'test_status=error\\n');
              }
            }
          "
        
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('test-comment.md', 'utf8');
            
            // 기존 테스트 리포트 댓글 찾기
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Vitest Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: Create Check Run
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testStatus = '${{ steps.test_results.outputs.test_status }}';
            const totalTests = '${{ steps.test_results.outputs.total_tests }}' || '0';
            const failedTests = '${{ steps.test_results.outputs.failed_tests }}' || '0';
            
            const conclusion = testStatus === 'success' ? 'success' : 
                             testStatus === 'error' ? 'neutral' : 'failure';
            
            const title = testStatus === 'success' 
              ? `✅ All ${totalTests} tests passed!`
              : testStatus === 'error'
              ? '⚠️ Test execution error'
              : `❌ ${failedTests}/${totalTests} tests failed`;
            
            const summary = testStatus === 'success' 
              ? `🎉 All ${totalTests} tests are passing! Great job!`
              : testStatus === 'error'
              ? '⚠️ Unable to execute tests properly. Check the workflow logs for details.'
              : `📊 **Test Results Summary**\n- Total: ${totalTests} tests\n- Failed: ${failedTests} tests\n- Check the PR comment for detailed results.`;
            
            try {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Vitest Test Results',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: conclusion,
                output: {
                  title: title,
                  summary: summary,
                  text: 'See the PR comment for detailed test results and coverage information.'
                }
              });
            } catch (error) {
              console.log('Could not create check run:', error.message);
              // 체크 실행 생성에 실패해도 워크플로우는 계속 진행
            } 