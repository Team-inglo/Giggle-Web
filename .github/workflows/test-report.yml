name: 📊 Advanced Test Report

on:
  pull_request:
    branches: [main, dev, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Run tests with JSON reporting
        id: test_execution
        run: |
          echo "🧪 Starting test execution..."

          # 테스트 파일 탐지 확인
          echo "📁 Test files found:"
          find src -name "*.test.*" -type f | tee test-files.txt
          echo "📊 Total test files: $(cat test-files.txt | wc -l)"

          # CI 환경 정보 출력
          echo "🔧 CI Environment info:"
          echo "  Node version: $(node --version)"
          echo "  npm version: $(npm --version)"
          echo "  pnpm version: $(pnpm --version)"
          echo "  Working directory: $(pwd)"

          # JSON 리포터로 테스트 실행
          echo "🏃 Running tests with JSON reporter..."
          npx vitest run --reporter=json --outputFile=test-results.json || echo "Test execution completed"

          # JSON 파일 확인
          if [ -f "test-results.json" ]; then
            echo "✅ JSON results file created"
            echo "📄 JSON file size: $(wc -c < test-results.json) bytes"
            echo "📄 First 200 chars of JSON:"
            head -c 200 test-results.json
            echo ""
          else
            echo "❌ JSON results file not found"
          fi

          # 커버리지 실행
          echo "📊 Running coverage..."
          npx vitest run --coverage > coverage-output.txt 2>&1 || echo "Coverage completed"
        continue-on-error: true
        
      - name: Parse JSON test results and generate report
        id: test_results
        run: |
          node -e "
            const fs = require('fs');

            let summary = {
              totalTests: 0,
              passedTests: 0,
              failedTests: 0,
              skippedTests: 0,
              testFiles: 0,
              runtime: 0,
              coverage: {
                lines: 0,
                functions: 0,
                branches: 0,
                statements: 0
              },
              failedTestDetails: []
            };

            try {
              console.log('🔍 Starting JSON test result parsing...');

              // JSON 파일에서 테스트 결과 파싱
              if (fs.existsSync('./test-results.json')) {
                console.log('📄 Reading JSON test results...');
                const jsonContent = fs.readFileSync('./test-results.json', 'utf8').trim();

                if (jsonContent) {
                  try {
                    const testResults = JSON.parse(jsonContent);
                    console.log('✅ JSON parsing successful!');

                    // Vitest JSON 구조에 맞춰 파싱
                    summary.totalTests = testResults.numTotalTests || 0;
                    summary.passedTests = testResults.numPassedTests || 0;
                    summary.failedTests = testResults.numFailedTests || 0;
                    summary.skippedTests = (testResults.numPendingTests || 0) + (testResults.numTodoTests || 0);
                    
                    // 테스트 파일 수는 testResults 배열의 길이로 계산
                    summary.testFiles = testResults.testResults ? testResults.testResults.length : 0;

                    // 실행 시간 계산 (startTime과 endTime 사용)
                    if (testResults.testResults && testResults.testResults.length > 0) {
                      const durations = testResults.testResults.map(suite => {
                        if (suite.endTime && suite.startTime) {
                          return suite.endTime - suite.startTime;
                        }
                        return 0;
                      });
                      summary.runtime = Math.max(...durations) || 0;
                    }

                    console.log('🎯 JSON parsing results:');
                    console.log(\`  Total tests: \${summary.totalTests}\`);
                    console.log(\`  Passed: \${summary.passedTests}\`);
                    console.log(\`  Failed: \${summary.failedTests}\`);
                    console.log(\`  Test files: \${summary.testFiles}\`);
                    console.log(\`  Runtime: \${summary.runtime}ms\`);

                    // 실패한 테스트 상세 정보 추출
                    if (testResults.testResults) {
                      testResults.testResults.forEach(suite => {
                        if (suite.assertionResults) {
                          suite.assertionResults.forEach(test => {
                            if (test.status === 'failed') {
                              summary.failedTestDetails.push({
                                file: suite.name || 'Unknown file',
                                test: test.title || test.fullName || 'Unknown test',
                                error: test.failureMessages?.join('\\n') || 'No error message'
                              });
                            }
                          });
                        }
                      });
                    }
                  } catch (parseError) {
                    console.log('❌ JSON parsing failed:', parseError.message);
                    console.log('📄 Raw content preview:', jsonContent.substring(0, 500));
                    throw parseError;
                  }
                } else {
                  console.log('⚠️ JSON file is empty');
                  throw new Error('JSON file is empty');
                }
              } else {
                console.log('⚠️ JSON file does not exist');
                throw new Error('JSON file does not exist');
              }

              // 커버리지 데이터 파싱
              if (fs.existsSync('./coverage/coverage-final.json')) {
                try {
                  const coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-final.json', 'utf8'));
                  if (coverageData.total) {
                    summary.coverage = {
                      lines: coverageData.total.lines?.pct || 0,
                      functions: coverageData.total.functions?.pct || 0,
                      branches: coverageData.total.branches?.pct || 0,
                      statements: coverageData.total.statements?.pct || 0
                    };
                    console.log('✅ Coverage data parsed successfully');
                  }
                } catch (e) {
                  console.log('❌ Coverage data parsing failed:', e.message);
                }
              }

              console.log('📊 Final summary:', JSON.stringify(summary, null, 2));

              // 성능 및 커버리지 체크
              const performanceWarnings = [];
              if (summary.runtime > 30000) {
                performanceWarnings.push('⚠️ Tests took longer than 30 seconds');
              }

              const coverageWarnings = [];
              Object.entries(summary.coverage).forEach(([metric, value]) => {
                if (value < 80) {
                  coverageWarnings.push(\`⚠️ \${metric.charAt(0).toUpperCase() + metric.slice(1)} coverage is below 80% (\${value}%)\`);
                }
              });

              const emoji = summary.failedTests === 0 && summary.totalTests > 0 ? '✅' :
                           summary.totalTests === 0 ? '⚠️' : '❌';
              const testStatus = summary.totalTests === 0 ? 'NO TESTS FOUND' :
                                summary.failedTests === 0 ? 'ALL TESTS PASSED' : 'SOME TESTS FAILED';

              let comment = \`## \${emoji} Vitest Test Results

              **Status:** \${testStatus}
              \${summary.runtime > 0 ? \`**Runtime:** \${(summary.runtime / 1000).toFixed(2)}s\` : ''}

              ### 📊 Test Summary
              \\\`\\\`\\\`
              Test Files: \${summary.testFiles} files
              Total:      \${summary.totalTests} tests
              Passed:     \${summary.passedTests} tests
              Failed:     \${summary.failedTests} tests
              Skipped:    \${summary.skippedTests} tests
              \\\`\\\`\\\`
              \`;

              if (summary.coverage.lines > 0 || summary.coverage.functions > 0) {
                comment += \`
              ### 📈 Coverage Report
              | Metric | Coverage | Status |
              |--------|----------|--------|
              | Lines | \${summary.coverage.lines.toFixed(1)}% | \${summary.coverage.lines >= 80 ? '✅' : '❌'} |
              | Functions | \${summary.coverage.functions.toFixed(1)}% | \${summary.coverage.functions >= 80 ? '✅' : '❌'} |
              | Branches | \${summary.coverage.branches.toFixed(1)}% | \${summary.coverage.branches >= 80 ? '✅' : '❌'} |
              | Statements | \${summary.coverage.statements.toFixed(1)}% | \${summary.coverage.statements >= 80 ? '✅' : '❌'} |
              \`;
              }

              if (performanceWarnings.length > 0) {
                comment += \`\\n### ⏱️ Performance Warnings\\n\` + performanceWarnings.join('\\n') + '\\n';
              }

              if (coverageWarnings.length > 0) {
                comment += \`\\n### 📉 Coverage Warnings\\n\` + coverageWarnings.join('\\n') + '\\n';
              }

              if (summary.failedTestDetails.length > 0) {
                comment += \`\\n### ❌ Failed Tests\\n\`;
                summary.failedTestDetails.slice(0, 5).forEach(test => {
                  comment += \`\\n**\${test.file}**\\n\`;
                  comment += \`- \${test.test}\\n\`;
                  comment += \`\\\`\\\`\\\`\\n\${test.error.slice(0, 500)}...\\\`\\\`\\\`\\n\`;
                });

                if (summary.failedTestDetails.length > 5) {
                  comment += \`\\n*... and \${summary.failedTestDetails.length - 5} more failures*\\n\`;
                }
              } else if (summary.totalTests > 0 && summary.failedTests === 0) {
                comment += \`\\n### 🎉 All tests passed!\\nGreat job! All \${summary.totalTests} tests are working correctly across \${summary.testFiles} test files.\\n\`;
              } else if (summary.totalTests === 0) {
                comment += \`\\n### ⚠️ No tests found\\nMake sure your test files are properly configured and located in the right directories.\\n\`;
              }

              comment += \`\\n### 🔗 Quick Actions\\n\`;
              comment += \`- [🧪 Run tests locally](\\\`pnpm test\\\`)\\n\`;
              comment += \`- [📊 Run coverage locally](\\\`pnpm test:coverage\\\`)\\n\`;
              comment += \`- [🎨 Open Vitest UI](\\\`pnpm test:ui\\\`)\\n\`;
              comment += \`- [⚙️ View workflow logs](\${process.env.GITHUB_SERVER_URL}/\${process.env.GITHUB_REPOSITORY}/actions/runs/\${process.env.GITHUB_RUN_ID})\\n\`;

              comment += \`\\n---\\n*🤖 Generated by GitHub Actions at \${new Date().toISOString()}*\`;

              fs.writeFileSync('test-comment.md', comment);

              // GitHub Actions 출력
              const output = process.env.GITHUB_OUTPUT;
              if (output) {
                fs.appendFileSync(output, \`test_status=\${summary.failedTests === 0 && summary.totalTests > 0 ? 'success' : summary.totalTests === 0 ? 'neutral' : 'failure'}\\n\`);
                fs.appendFileSync(output, \`total_tests=\${summary.totalTests}\\n\`);
                fs.appendFileSync(output, \`failed_tests=\${summary.failedTests}\\n\`);
                fs.appendFileSync(output, \`test_files=\${summary.testFiles}\\n\`);
              }

            } catch (error) {
              console.error('💥 Error in JSON test parsing:', error);
              console.error('📋 Stack trace:', error.stack);

              const fallbackComment = \`## ⚠️ Test Parsing Error

              Could not parse JSON test results properly. The tests may have run but results couldn't be processed.

              **Debugging info:**
              - Error: \${error.message}
              - Check the [workflow logs](\${process.env.GITHUB_SERVER_URL}/\${process.env.GITHUB_REPOSITORY}/actions/runs/\${process.env.GITHUB_RUN_ID}) for details

              **Next steps:**
              - Run tests locally: \\\`pnpm test\\\`
              - Check vitest configuration in \\\`vite.config.ts\\\`
              - Verify test files are in the correct location

              ---
              *🤖 Generated by GitHub Actions*\`;

              fs.writeFileSync('test-comment.md', fallbackComment);

              const output = process.env.GITHUB_OUTPUT;
              if (output) {
                fs.appendFileSync(output, 'test_status=error\\n');
              }
            }
          "
        
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('test-comment.md', 'utf8');
            
            // 기존 테스트 리포트 댓글 찾기
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Vitest Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: Create Check Run
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testStatus = '${{ steps.test_results.outputs.test_status }}';
            const totalTests = '${{ steps.test_results.outputs.total_tests }}' || '0';
            const failedTests = '${{ steps.test_results.outputs.failed_tests }}' || '0';
            
            const conclusion = testStatus === 'success' ? 'success' : 
                             testStatus === 'error' ? 'neutral' : 'failure';
            
            const title = testStatus === 'success' 
              ? `✅ All ${totalTests} tests passed!`
              : testStatus === 'error'
              ? '⚠️ Test execution error'
              : `❌ ${failedTests}/${totalTests} tests failed`;
            
            const summary = testStatus === 'success' 
              ? `🎉 All ${totalTests} tests are passing! Great job!`
              : testStatus === 'error'
              ? '⚠️ Unable to execute tests properly. Check the workflow logs for details.'
              : `📊 **Test Results Summary**\n- Total: ${totalTests} tests\n- Failed: ${failedTests} tests\n- Check the PR comment for detailed results.`;
            
            try {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Vitest Test Results',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: conclusion,
                output: {
                  title: title,
                  summary: summary,
                  text: 'See the PR comment for detailed test results and coverage information.'
                }
              });
            } catch (error) {
              console.log('Could not create check run:', error.message);
              // 체크 실행 생성에 실패해도 워크플로우는 계속 진행
            } 