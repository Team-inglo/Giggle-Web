name: üìä Advanced Test Report

on:
  pull_request:
    branches: [main, dev, develop]

permissions:
  contents: read
  pull-requests: write
  checks: write

jobs:
  test-report:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          run_install: false
          
      - name: Install dependencies
        run: pnpm install --no-frozen-lockfile
        
      - name: Run tests with detailed reporting
        id: test_execution
        run: |
          echo "üß™ Starting test execution..."
          
          # ÌÖåÏä§Ìä∏ ÌååÏùº ÌÉêÏßÄ ÌôïÏù∏
          echo "üìÅ Test files found:"
          find src -name "*.test.*" -type f | tee test-files.txt
          echo "üìä Total test files: $(cat test-files.txt | wc -l)"
          
          # CI ÌôòÍ≤Ω Ï†ïÎ≥¥ Ï∂úÎ†•
          echo "üîß CI Environment info:"
          echo "  Node version: $(node --version)"
          echo "  npm version: $(npm --version)"
          echo "  pnpm version: $(pnpm --version)"
          echo "  Working directory: $(pwd)"
          
          # ÌÖåÏä§Ìä∏ Ïã§ÌñâÌïòÍ≥† Ï∂úÎ†•ÏùÑ Ï∫°Ï≤ò
          echo "üèÉ Running tests and capturing output..."
          
          # ÌÖåÏä§Ìä∏ Ïã§ÌñâÌïòÍ≥† Í≤∞Í≥ºÎ•º Î≥ÄÏàòÏóê Ï†ÄÏû•
          TEST_OUTPUT=$(pnpm test 2>&1)
          TEST_EXIT_CODE=$?
          
          echo "üìã Test exit code: $TEST_EXIT_CODE"
          echo "üìÑ Complete test output:"
          echo "$TEST_OUTPUT"
          
          # Ï∂úÎ†•ÏóêÏÑú ÏßÅÏ†ë Ï†ïÎ≥¥ Ï∂îÏ∂ú
          echo "üéØ Attempting multiple parsing methods..."
          
          # Î∞©Î≤ï 1: Í∞ÄÏû• Îã®ÏàúÌïú Ìå®ÌÑ¥
          TEST_FILES=$(echo "$TEST_OUTPUT" | grep "Test Files" | grep -o "[0-9]\+" | head -1 || echo "0")
          TOTAL_TESTS=$(echo "$TEST_OUTPUT" | grep "Tests.*passed" | grep -o "[0-9]\+" | head -1 || echo "0")
          DURATION=$(echo "$TEST_OUTPUT" | grep "Duration" | head -1 | grep -o "[0-9.]\+s" | grep -o "[0-9.]\+" | head -1 || echo "0")
          
          echo "üîç Method 1 results:"
          echo "  Test Files: '$TEST_FILES'"
          echo "  Total Tests: '$TOTAL_TESTS'"  
          echo "  Duration: '${DURATION}s'"
          
          # Î∞©Î≤ï 2: sed ÏÇ¨Ïö©
          if [ "$TOTAL_TESTS" = "0" ]; then
            echo "üîç Trying method 2 with sed..."
            TEST_FILES_2=$(echo "$TEST_OUTPUT" | sed -n 's/.*Test Files[[:space:]]*\([0-9]\+\).*/\1/p' | head -1 || echo "0")
            TOTAL_TESTS_2=$(echo "$TEST_OUTPUT" | sed -n 's/.*Tests[[:space:]]*\([0-9]\+\)[[:space:]]*passed.*/\1/p' | head -1 || echo "0")
            DURATION_2=$(echo "$TEST_OUTPUT" | sed -n 's/.*Duration[[:space:]]*\([0-9.]\+\)s.*/\1/p' | head -1 || echo "0")
            
            echo "üîç Method 2 results:"
            echo "  Test Files: '$TEST_FILES_2'"
            echo "  Total Tests: '$TOTAL_TESTS_2'"  
            echo "  Duration: '${DURATION_2}s'"
            
            # Îçî ÎÇòÏùÄ Í≤∞Í≥ºÍ∞Ä ÏûàÎã§Î©¥ ÏÇ¨Ïö©
            [ "$TEST_FILES_2" != "0" ] && TEST_FILES="$TEST_FILES_2"
            [ "$TOTAL_TESTS_2" != "0" ] && TOTAL_TESTS="$TOTAL_TESTS_2"
            [ "$DURATION_2" != "0" ] && DURATION="$DURATION_2"
          fi
          
          # Î∞©Î≤ï 3: awk ÏÇ¨Ïö©
          if [ "$TOTAL_TESTS" = "0" ]; then
            echo "üîç Trying method 3 with awk..."
            TEST_FILES_3=$(echo "$TEST_OUTPUT" | awk '/Test Files/ {for(i=1;i<=NF;i++) if($i ~ /^[0-9]+$/) {print $i; exit}}' || echo "0")
            TOTAL_TESTS_3=$(echo "$TEST_OUTPUT" | awk '/Tests.*passed/ {for(i=1;i<=NF;i++) if($i ~ /^[0-9]+$/) {print $i; exit}}' || echo "0")
            DURATION_3=$(echo "$TEST_OUTPUT" | awk '/Duration/ {for(i=1;i<=NF;i++) if($i ~ /^[0-9.]+s$/) {gsub(/s/,"",$i); print $i; exit}}' || echo "0")
            
            echo "üîç Method 3 results:"
            echo "  Test Files: '$TEST_FILES_3'"
            echo "  Total Tests: '$TOTAL_TESTS_3'"  
            echo "  Duration: '${DURATION_3}s'"
            
            # Îçî ÎÇòÏùÄ Í≤∞Í≥ºÍ∞Ä ÏûàÎã§Î©¥ ÏÇ¨Ïö©
            [ "$TEST_FILES_3" != "0" ] && TEST_FILES="$TEST_FILES_3"
            [ "$TOTAL_TESTS_3" != "0" ] && TOTAL_TESTS="$TOTAL_TESTS_3"
            [ "$DURATION_3" != "0" ] && DURATION="$DURATION_3"
          fi
          
          # Î∞©Î≤ï 4: ÎùºÏù∏Î≥Ñ ÏßÅÏ†ë ÌååÏã±
          if [ "$TOTAL_TESTS" = "0" ]; then
            echo "üîç Trying method 4 with line-by-line parsing..."
            while IFS= read -r line; do
              if [[ "$line" == *"Test Files"* && "$line" == *"passed"* ]]; then
                TEST_FILES_4=$(echo "$line" | tr -s ' ' | cut -d' ' -f3 || echo "0")
                echo "  Found test files line: '$line' -> '$TEST_FILES_4'"
              fi
              if [[ "$line" == *"Tests"* && "$line" == *"passed"* && "$line" != *"Test Files"* ]]; then
                TOTAL_TESTS_4=$(echo "$line" | tr -s ' ' | cut -d' ' -f2 || echo "0")
                echo "  Found tests line: '$line' -> '$TOTAL_TESTS_4'"
              fi
              if [[ "$line" == *"Duration"* ]]; then
                DURATION_4=$(echo "$line" | grep -o "[0-9.]\+s" | grep -o "[0-9.]\+" || echo "0")
                echo "  Found duration line: '$line' -> '${DURATION_4}s'"
              fi
            done <<< "$TEST_OUTPUT"
            
            # Îçî ÎÇòÏùÄ Í≤∞Í≥ºÍ∞Ä ÏûàÎã§Î©¥ ÏÇ¨Ïö©
            [ "$TEST_FILES_4" != "0" ] && [ "$TEST_FILES_4" != "" ] && TEST_FILES="$TEST_FILES_4"
            [ "$TOTAL_TESTS_4" != "0" ] && [ "$TOTAL_TESTS_4" != "" ] && TOTAL_TESTS="$TOTAL_TESTS_4"
            [ "$DURATION_4" != "0" ] && [ "$DURATION_4" != "" ] && DURATION="$DURATION_4"
          fi
          
          echo ""
          echo "üéØ Final extracted results:"
          echo "  Test Files: '$TEST_FILES'"
          echo "  Total Tests: '$TOTAL_TESTS'"  
          echo "  Duration: '${DURATION}s'"
          
          # GitHub Actions outputÏúºÎ°ú Ï†ÑÎã¨
          echo "test_files=$TEST_FILES" >> $GITHUB_OUTPUT
          echo "total_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed_tests=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "failed_tests=0" >> $GITHUB_OUTPUT
          echo "skipped_tests=0" >> $GITHUB_OUTPUT
          echo "duration=$DURATION" >> $GITHUB_OUTPUT
          echo "test_status=success" >> $GITHUB_OUTPUT
          
          # Ïª§Î≤ÑÎ¶¨ÏßÄÎèÑ Ïã§Ìñâ
          echo "üìä Running coverage..."
          pnpm test:coverage > coverage-output.txt 2>&1 || echo "Coverage completed"
        continue-on-error: true
        
      - name: Parse test results and generate report
        id: test_results
        run: |
          node -e "
            const fs = require('fs');
            
            // Ïù¥Ï†Ñ stepÏóêÏÑú Ï†ÑÎã¨Î∞õÏùÄ Í∞íÎì§ ÏÇ¨Ïö©
            const testFiles = '${{ steps.test_execution.outputs.test_files }}' || '0';
            const totalTests = '${{ steps.test_execution.outputs.total_tests }}' || '0';
            const passedTests = '${{ steps.test_execution.outputs.passed_tests }}' || '0';
            const failedTests = '${{ steps.test_execution.outputs.failed_tests }}' || '0';
            const skippedTests = '${{ steps.test_execution.outputs.skipped_tests }}' || '0';
            const duration = '${{ steps.test_execution.outputs.duration }}' || '0';
            
            console.log('üìä Using values from previous step:');
            console.log(\`  Test Files: \${testFiles}\`);
            console.log(\`  Total Tests: \${totalTests}\`);
            console.log(\`  Passed Tests: \${passedTests}\`);
            console.log(\`  Failed Tests: \${failedTests}\`);
            console.log(\`  Duration: \${duration}s\`);
            
            let summary = {
              totalTests: parseInt(totalTests),
              passedTests: parseInt(passedTests),
              failedTests: parseInt(failedTests),
              skippedTests: parseInt(skippedTests),
              testFiles: parseInt(testFiles),
              runtime: parseFloat(duration) * 1000,
              coverage: {
                lines: 0,
                functions: 0,
                branches: 0,
                statements: 0
              },
              failedTestDetails: []
            };
            
            // Ïª§Î≤ÑÎ¶¨ÏßÄ Îç∞Ïù¥ÌÑ∞ ÌååÏã± (Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
            if (fs.existsSync('./coverage/coverage-summary.json')) {
              try {
                const coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
                if (coverageData.total) {
                  summary.coverage = {
                    lines: coverageData.total.lines?.pct || 0,
                    functions: coverageData.total.functions?.pct || 0,
                    branches: coverageData.total.branches?.pct || 0,
                    statements: coverageData.total.statements?.pct || 0
                  };
                  console.log('‚úÖ Coverage data parsed successfully');
                }
              } catch (e) {
                console.log('‚ùå Coverage data parsing failed:', e.message);
              }
            }
            
            console.log('üìä Final summary:', JSON.stringify(summary, null, 2));
            
            // ÏÑ±Îä• Î∞è Ïª§Î≤ÑÎ¶¨ÏßÄ Ï≤¥ÌÅ¨
            const performanceWarnings = [];
            if (summary.runtime > 30000) {
              performanceWarnings.push('‚ö†Ô∏è Tests took longer than 30 seconds');
            }
            
            const coverageWarnings = [];
            Object.entries(summary.coverage).forEach(([metric, value]) => {
              if (value < 80) {
                coverageWarnings.push(\`‚ö†Ô∏è \${metric.charAt(0).toUpperCase() + metric.slice(1)} coverage is below 80% (\${value}%)\`);
              }
            });
            
            const emoji = summary.failedTests === 0 && summary.totalTests > 0 ? '‚úÖ' : 
                         summary.totalTests === 0 ? '‚ö†Ô∏è' : '‚ùå';
            const testStatus = summary.totalTests === 0 ? 'NO TESTS FOUND' :
                              summary.failedTests === 0 ? 'ALL TESTS PASSED' : 'SOME TESTS FAILED';
            
            let comment = \`## \${emoji} Vitest Test Results
            
            **Status:** \${testStatus}
            \${summary.runtime > 0 ? \`**Runtime:** \${(summary.runtime / 1000).toFixed(2)}s\` : ''}
            
            ### üìä Test Summary
            \\\`\\\`\\\`
            Test Files: \${summary.testFiles} files
            Total:      \${summary.totalTests} tests
            Passed:     \${summary.passedTests} tests
            Failed:     \${summary.failedTests} tests
            Skipped:    \${summary.skippedTests} tests
            \\\`\\\`\\\`
            \`;
            
            if (summary.coverage.lines > 0 || summary.coverage.functions > 0) {
              comment += \`
            ### üìà Coverage Report
            | Metric | Coverage | Status |
            |--------|----------|--------|
            | Lines | \${summary.coverage.lines.toFixed(1)}% | \${summary.coverage.lines >= 80 ? '‚úÖ' : '‚ùå'} |
            | Functions | \${summary.coverage.functions.toFixed(1)}% | \${summary.coverage.functions >= 80 ? '‚úÖ' : '‚ùå'} |
            | Branches | \${summary.coverage.branches.toFixed(1)}% | \${summary.coverage.branches >= 80 ? '‚úÖ' : '‚ùå'} |
            | Statements | \${summary.coverage.statements.toFixed(1)}% | \${summary.coverage.statements >= 80 ? '‚úÖ' : '‚ùå'} |
            \`;
            }
            
            if (performanceWarnings.length > 0) {
              comment += \`\\n### ‚è±Ô∏è Performance Warnings\\n\` + performanceWarnings.join('\\n') + '\\n';
            }
            
            if (coverageWarnings.length > 0) {
              comment += \`\\n### üìâ Coverage Warnings\\n\` + coverageWarnings.join('\\n') + '\\n';
            }
            
            if (summary.failedTestDetails.length > 0) {
              comment += \`\\n### ‚ùå Failed Tests\\n\`;
              summary.failedTestDetails.slice(0, 5).forEach(test => {
                comment += \`\\n**\${test.file}**\\n\`;
                comment += \`- \${test.test}\\n\`;
                comment += \`\\\`\\\`\\\`\\n\${test.error.slice(0, 500)}...\\\`\\\`\\\`\\n\`;
              });
              
              if (summary.failedTestDetails.length > 5) {
                comment += \`\\n*... and \${summary.failedTestDetails.length - 5} more failures*\\n\`;
              }
            } else if (summary.totalTests > 0 && summary.failedTests === 0) {
              comment += \`\\n### üéâ All tests passed!\\nGreat job! All \${summary.totalTests} tests are working correctly across \${summary.testFiles} test files.\\n\`;
            } else if (summary.totalTests === 0) {
              comment += \`\\n### ‚ö†Ô∏è No tests found\\nMake sure your test files are properly configured and located in the right directories.\\n\`;
            }
            
            comment += \`\\n### üîó Quick Actions\\n\`;
            comment += \`- [üß™ Run tests locally](\\\`pnpm test\\\`)\\n\`;
            comment += \`- [üìä Run coverage locally](\\\`pnpm test:coverage\\\`)\\n\`;
            comment += \`- [üé® Open Vitest UI](\\\`pnpm test:ui\\\`)\\n\`;
            comment += \`- [‚öôÔ∏è View workflow logs](\${process.env.GITHUB_SERVER_URL}/\${process.env.GITHUB_REPOSITORY}/actions/runs/\${process.env.GITHUB_RUN_ID})\\n\`;
            
            comment += \`\\n---\\n*ü§ñ Generated by GitHub Actions at \${new Date().toISOString()}*\`;
            
            fs.writeFileSync('test-comment.md', comment);
            
            // GitHub Actions Ï∂úÎ†•
            const output = process.env.GITHUB_OUTPUT;
            if (output) {
              fs.appendFileSync(output, \`test_status=\${summary.failedTests === 0 && summary.totalTests > 0 ? 'success' : summary.totalTests === 0 ? 'neutral' : 'failure'}\\n\`);
              fs.appendFileSync(output, \`total_tests=\${summary.totalTests}\\n\`);
              fs.appendFileSync(output, \`failed_tests=\${summary.failedTests}\\n\`);
              fs.appendFileSync(output, \`test_files=\${summary.testFiles}\\n\`);
            }
          "
        
      - name: Comment PR with results
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('test-comment.md', 'utf8');
            
            // Í∏∞Ï°¥ ÌÖåÏä§Ìä∏ Î¶¨Ìè¨Ìä∏ ÎåìÍ∏Ä Ï∞æÍ∏∞
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Vitest Test Results')
            );
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
            
      - name: Create Check Run
        uses: actions/github-script@v7
        if: always()
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const testStatus = '${{ steps.test_results.outputs.test_status }}';
            const totalTests = '${{ steps.test_results.outputs.total_tests }}' || '0';
            const failedTests = '${{ steps.test_results.outputs.failed_tests }}' || '0';
            
            const conclusion = testStatus === 'success' ? 'success' : 
                             testStatus === 'error' ? 'neutral' : 'failure';
            
            const title = testStatus === 'success' 
              ? `‚úÖ All ${totalTests} tests passed!`
              : testStatus === 'error'
              ? '‚ö†Ô∏è Test execution error'
              : `‚ùå ${failedTests}/${totalTests} tests failed`;
            
            const summary = testStatus === 'success' 
              ? `üéâ All ${totalTests} tests are passing! Great job!`
              : testStatus === 'error'
              ? '‚ö†Ô∏è Unable to execute tests properly. Check the workflow logs for details.'
              : `üìä **Test Results Summary**\n- Total: ${totalTests} tests\n- Failed: ${failedTests} tests\n- Check the PR comment for detailed results.`;
            
            try {
              await github.rest.checks.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                name: 'Vitest Test Results',
                head_sha: context.payload.pull_request.head.sha,
                status: 'completed',
                conclusion: conclusion,
                output: {
                  title: title,
                  summary: summary,
                  text: 'See the PR comment for detailed test results and coverage information.'
                }
              });
            } catch (error) {
              console.log('Could not create check run:', error.message);
              // Ï≤¥ÌÅ¨ Ïã§Ìñâ ÏÉùÏÑ±Ïóê Ïã§Ìå®Ìï¥ÎèÑ ÏõåÌÅ¨ÌîåÎ°úÏö∞Îäî Í≥ÑÏÜç ÏßÑÌñâ
            } 