name: üß™ Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [18, 20]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV
          
      - name: Setup pnpm cache
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build project
        run: pnpm build
        
      - name: Run tests with JSON output
        run: |
          pnpm test:coverage --reporter=json --outputFile=test-results.json
        continue-on-error: true
        
      - name: Generate test summary
        if: github.event_name == 'pull_request'
        id: test_summary
        run: |
          node -e "
            const fs = require('fs');
            const path = require('path');
            
            try {
              // Coverage Í≤∞Í≥º ÏùΩÍ∏∞
              const coverageData = JSON.parse(fs.readFileSync('./coverage/coverage-summary.json', 'utf8'));
              const testResults = JSON.parse(fs.readFileSync('./test-results.json', 'utf8'));
              
              const summary = {
                totalTests: testResults.numTotalTests || 0,
                passedTests: testResults.numPassedTests || 0,
                failedTests: testResults.numFailedTests || 0,
                coverage: {
                  lines: coverageData.total?.lines?.pct || 0,
                  functions: coverageData.total?.functions?.pct || 0,
                  branches: coverageData.total?.branches?.pct || 0,
                  statements: coverageData.total?.statements?.pct || 0
                }
              };
              
              const emoji = summary.failedTests === 0 ? '‚úÖ' : '‚ùå';
              const testStatus = summary.failedTests === 0 ? 'PASSED' : 'FAILED';
              
              const comment = \`## \${emoji} Test Results
              
              **Status:** \${testStatus}
              
              ### üìä Test Summary
              - **Total Tests:** \${summary.totalTests}
              - **Passed:** \${summary.passedTests}
              - **Failed:** \${summary.failedTests}
              
              ### üìà Coverage Report
              | Metric | Coverage |
              |--------|----------|
              | Lines | \${summary.coverage.lines}% |
              | Functions | \${summary.coverage.functions}% |
              | Branches | \${summary.coverage.branches}% |
              | Statements | \${summary.coverage.statements}% |
              
              \${summary.failedTests > 0 ? '### ‚ùó Failed Tests\\nPlease check the test logs above for details.' : '### üéâ All tests passed!'}
              
              ---
              *Generated by GitHub Actions*\`;
              
              fs.writeFileSync('test-comment.md', comment);
              console.log('Test summary generated successfully');
            } catch (error) {
              console.error('Error generating test summary:', error);
              const fallbackComment = \`## ‚ö†Ô∏è Test Results
              
              Unable to parse test results. Please check the workflow logs.
              
              ---
              *Generated by GitHub Actions*\`;
              fs.writeFileSync('test-comment.md', fallbackComment);
            }
          "
        
      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const comment = fs.readFileSync('test-comment.md', 'utf8');
            
            // Í∏∞Ï°¥ Î¥á ÎåìÍ∏Ä Ï∞æÍ∏∞
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.login === 'github-actions[bot]' && 
              comment.body.includes('Test Results')
            );
            
            if (botComment) {
              // Í∏∞Ï°¥ ÎåìÍ∏Ä ÏóÖÎç∞Ïù¥Ìä∏
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: comment
              });
            } else {
              // ÏÉà ÎåìÍ∏Ä ÏÉùÏÑ±
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: comment
              });
            }
        
      - name: Upload coverage reports to Codecov
        if: github.event_name == 'push' || github.event_name == 'pull_request'
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/clover.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        continue-on-error: true

      - name: Upload test artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-node-${{ matrix.node-version }}
          path: |
            coverage/
            test-results.json
            test-comment.md

  lint:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18
          
      - name: Install pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run ESLint
        run: pnpm lint
        
      - name: Check Prettier formatting
        run: pnpm format:check 